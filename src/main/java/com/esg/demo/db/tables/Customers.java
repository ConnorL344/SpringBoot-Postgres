/*
 * This file is generated by jOOQ.
 */
package com.esg.demo.db.tables;


import com.esg.demo.db.Keys;
import com.esg.demo.db.Public;
import com.esg.demo.db.tables.records.CustomersRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>public.customers.customer_ref</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMER_REF = createField(DSL.name("customer_ref"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.customers.customer_name</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.address_line_1</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS_LINE_1 = createField(DSL.name("address_line_1"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.address_line_2</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS_LINE_2 = createField(DSL.name("address_line_2"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.town</code>.
     */
    public final TableField<CustomersRecord, String> TOWN = createField(DSL.name("town"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.county</code>.
     */
    public final TableField<CustomersRecord, String> COUNTY = createField(DSL.name("county"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.country</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.customers.postcode</code>.
     */
    public final TableField<CustomersRecord, String> POSTCODE = createField(DSL.name("postcode"), SQLDataType.VARCHAR(50), this, "");

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    /**
     * Create a <code>public.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_PK;
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    @Override
    public Customers as(Table<?> alias) {
        return new Customers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Table<?> name) {
        return new Customers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Condition condition) {
        return new Customers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
